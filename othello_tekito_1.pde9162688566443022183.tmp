int state [][] = new int[8][8];
int canSetPoint [][] = new int[8][8];

int turn;

void setup() {
  size(400, 400);
  for (int i=0; i<8; i++) {
    for (int j=0; j<8; j++) {
      state[i][j]=0;
      canSetPoint[i][j]=0;
    }
  }
  state[3][3]=1;
  state[3][4]=-1;
  state[4][3]=-1;
  state[4][4]=1;

  turn = 1;
  //1:kuro
  //-1:siro

  skipCheck();
}

void draw() {

  smooth();
  background(0, 120, 0);

  for (int i=0; i<8; i++) {
    for (int j=0; j<8; j++) {
      noFill();
      if (turn==1) {
        stroke(0);
      } else {
        stroke(255);
      }
      strokeWeight(1);
      rect((width/8)*i, (height/8)*j, width/8, height/8);
      if (state[i][j]==0) {
      } else if (state[i][j]==1) {
        noStroke();
        fill(0);
        ellipse((width/8)*i+width/16, (height/8)*j+height/16, width/10, height/10);
      } else if (state[i][j]==-1) {
        noStroke();
        fill(255);
        ellipse((width/8)*i+width/16, (height/8)*j+height/16, width/10, height/10);
      }

      if (canSetPoint[i][j]==1) {
        fill(255, 0, 0);
        rect((width/8)*i, (height/8)*j, width/8, height/8);
      } else {
      }
    }
  }
}

void mousePressed() {
  for (int i=0; i<8; i++) {
    for (int j=0; j<8; j++) {
      if (mouseX>(width/8)*i&&mouseX<(width/8)*(i+1)) {
        if (mouseY>(height/8)*j&&mouseY<(height/8)*(j+1)) { 
          if (turn==1) {
            if (setCheck(i, j, turn, 1)) {
              state[i][j]=1;
              turn = -1;
            }
          } else {
            if (setCheck(i, j, turn, 1)) {
              state[i][j]=-1;
              turn = 1;
            }
          }
        }
      }
    }
  }
}

boolean setCheck(int x, int y, int t, int m) {
  //0:check
  //1:set
  int change [][] = new int[8][8];
  boolean canSet = false;

  if (state[x][y]==0) {
    //none area

    for (int i=-1; i<2; i++) {
      for (int j=-1; j<2; j++) {
        if (x+i>=0&&x+i<8&&y+j>=0&&y+j<8) {
          if (state[x+i][y+j]==-t) {

            //another color

            int reverseNum = 0;

            for (int k=2; k<8; k++) {
              if (x+i*k>=0&&x+i*k<8&&y+j*k>=0&&y+j*k<8&&reverseNum==0) {
                //same color
                if (state[x+i*k][y+j*k]==t) {
                  reverseNum = k;
                }
              }
            }

            if (m==1) {
              //reverse
              println("pl " + x + " : " + y);
              for (int k=0; k<reverseNum; k++) {
                state[x+i*k][y+j*k] = t;
                canSet = true;
              }
            } else {
              //println("pl " + x + " : " + y);
              canSet = true;
              //not reverse
            }
          }
        }
      }
    }
  }
  return canSet;
}

void skipCheck() {
  println("sn");

  boolean none = true;

  for (int i=0; i<8; i++) {
    for (int j=0; j<8; j++) {
      canSetPoint[i][j] = 0;
    }
  }

  for (int i=0; i<8; i++) {
    for (int j=0; j<8; j++) {
      if (setCheck(i, j, turn, 0)) {
        println("can set point : " + i + " " + j);
        canSetPoint[i][j] = 1;
        none = false;
      }
    }
  }

  if (none) {
    turn = -turn;
  }
}